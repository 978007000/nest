// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package node

import (
	"database/sql"
	"fmt"
	"github.com/gogf/gf/frame/g"
	"github.com/tal-tech/go-zero/core/mr"
	"strconv"
	"time"
)

// SecondaryEntity 节点列表实体结构
type SecondaryEntity struct {
	Id        uint   `json:"id"`         // 一级编号
	Name      string `json:"name"`       // 一级名称
	Id2       uint   `json:"id2"`        // 二级编号
	Name2     string `json:"name2"`      // 二级名称
	UpdatedAt string `json:"updated_at"` // 二级名称
}

// GetNodeList 获取指定父级编号下的所有节点列表
func GetNodeList(parentId string, page, limit int) ([]*SecondaryEntity, error) {
	all := Model.As("l1").
		Cache(time.Minute, fmt.Sprintf("GetNodeList#%v#%v#%v", parentId, page, limit)).
		LeftJoin("node", "l2", "l2.parent_id=l1.id").
		Where("l1.is_valid=1 and l1.parent_id=? and l2.is_valid=1", parentId).
		Fields("l1.id, l1.`name`, l2.id as id2, l2.`name` as name2, l2.updated_at").
		Order("l1.sort, l2.sort").
		Page(page, limit)

	var nodes []*SecondaryEntity
	if err := all.Structs(&nodes); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return nodes, nil
}

// SecondaryNode 节点树实体结构
type SecondaryNode struct {
	Id       uint             `json:"id"`       // 节点编号
	Name     string           `json:"name"`     // 节点名称
	Level    uint             `json:"level"`    // 节点级别
	Children []*SecondaryNode `json:"children,omitempty"` // 下级节点列表
}

// GetNodeTree 获取指定父级编号下的所有节点树
func GetNodeTree(parentId string) ([]*SecondaryNode, error) {
	all := Model.
		Cache(time.Minute, fmt.Sprintf("GetNodeTree#%v", parentId)).
		Where(g.Map{"parent_id": parentId, "is_valid": 1}).
		Order("sort")
	var nodes []*SecondaryNode
	if err := all.Structs(&nodes); err != nil && err != sql.ErrNoRows && len(nodes) != 0 {
		return nil, err
	}

	err := mr.Finish(multiFns(nodes)...)

	if err != nil {
		return nil, err
	}

	return nodes, nil
}

type fns []func() error

func multiFns(nodes []*SecondaryNode) fns {
	var result fns
	for _, node := range nodes {
		result = append(result, fn(node))
	}
	return result
}

func fn(node *SecondaryNode) func() error {
	return func() error {
		if node.Level == 1 {
			subNodeTree, err := GetNodeTree(strconv.Itoa(int(node.Id)))
			node.Children = subNodeTree
			return err
		} else {
			return nil
		}
	}
}
